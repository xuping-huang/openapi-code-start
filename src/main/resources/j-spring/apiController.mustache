package {{package}};

{{^jdk8}}
{{#imports}}import {{import}};
{{/imports}}
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
{{/jdk8}}
import org.springframework.stereotype.Controller;
{{^jdk8}}
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
{{/jdk8}}
import org.springframework.web.bind.annotation.RequestMapping;
{{^jdk8}}
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
{{/jdk8}}
{{^isDelegate}}
import org.springframework.web.context.request.NativeWebRequest;
{{/isDelegate}}
{{^jdk8}}
import org.springframework.web.multipart.MultipartFile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;

    {{#useBeanValidation}}
import javax.validation.constraints.*;
import javax.validation.Valid;
    {{/useBeanValidation}}
{{/jdk8}}
{{#jdk8}}
import java.util.Optional;
{{/jdk8}}
{{^jdk8}}
import java.util.List;
import java.util.Map;
    {{#async}}
import java.util.concurrent.Callable;
    {{/async}}
{{/jdk8}}

/**
 * @class {{classname}}Controller [interface file - {{classname}}.java]
 * @brief {{classname}} operation implement
 * @note
 * JWT Authorization required.
 */
@Controller
{{=<% %>=}}
@RequestMapping("<%>defaultBasePath%>")
<%={{ }}=%>
{{#operations}}
public class {{classname}}Controller implements {{classname}}Api {
{{#isDelegate}}

    private final {{classname}}Delegate delegate;

    public {{classname}}Controller(@org.springframework.beans.factory.annotation.Autowired(required = false) {{classname}}Delegate delegate) {
    {{#jdk8}}
        this.delegate = Optional.ofNullable(delegate).orElse(new {{classname}}Delegate() {});
    }

    @Override
    public {{classname}}Delegate getDelegate() {
        return delegate;
    }
    {{/jdk8}}
    {{^jdk8}}
        this.delegate = delegate;
    }
    {{/jdk8}}
{{/isDelegate}}
{{^isDelegate}}
    private static final Logger log = LoggerFactory.getLogger({{classname}}Controller.class);

    @Autowired
    {{classname}}Service {{classVarName}}Service;

    {{^reactive}}

    {{^jdk8}}
    {{/jdk8}}
    private final ObjectMapper objectMapper;
    private final HttpServletRequest request;

    @Autowired
    public {{classname}}Controller(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }
    {{#jdk8}}

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }
    {{/jdk8}}
    {{/reactive}}
{{/isDelegate}}

{{^jdk8}}
{{#operation}}
    public {{#responseWrapper}}{{.}}<{{/responseWrapper}}ResponseEntity<{{>returnTypes}}>{{#responseWrapper}}>{{/responseWrapper}} {{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
    {{^isDelegate}}
        {{^async}}
        {{>methodBody}}
        {{/async}}
        {{#async}}
        return new Callable<ResponseEntity<{{>returnTypes}}>>() {
            @Override
            public ResponseEntity<{{>returnTypes}}> call() {
                {{>methodBody}}
            }
        };
        {{/async}}
    {{/isDelegate}}
    {{#isDelegate}}
        return delegate.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/isDelegate}}
    }

{{/operation}}
{{/jdk8}}
}
{{/operations}}
