/**
* Unit test of the {{baseName}}.
*/
const _ = require('lodash')
const config = require('config')
const should = require('chai').should()
const moment = require('moment')
const httpStatus = require('http-status')
const jom = require('../lib/jom')
const td = require('../lib/testData')
const th = require('../lib/testHelper')
const assert = require('../lib/assert')
// TODO: change if need
const {{classname}}Service = require('../../src/services/service.{{classname}}')
const es = require('../../src/scripts/esload-helper')

const ADMIN_USER = td.Token.Admin
const COPILOT_USER = td.Token.Copilot
const SUBMIT_USER = td.Token.User
const M2M_USER = td.Token.M2M_USER
const beforeTest = moment()
let RECORDS = []
const newIds = []
// TODO TEST FIRST: adjust variable
const {{baseName}}_A_ID = undefined
const ES_TYPE = config.ES.ES_TYPE
const ES_INDEX = config.ES.INDEXES.ES_{{baseName}}_INDEX

module.exports = describe('{{baseName}} resource', () => {
  before(async () => {
    // TODO UNIT
    RECORDS = await th.loadData('{{baseName}}')
  });
  const sleep = (time) => new Promise((resolve) => {
    setTimeout(resolve, time)
  })
  // TODO: remove if not need elastic search
{{#operations}}
  {{#operation}}
    {{#vendorExtensions}}
      {{#x-post-method}}
  const {{baseName}}IndexCreate = async (record) => {
    await es.createModelIndex(ES_INDEX, ES_TYPE, record)
    await sleep(config.WAIT_TIME)
  }
      {{/x-post-method}}
      {{#x-put-method}}
  const {{baseName}}IndexUpdate = async (record) => {
    await es.updateModelIndex(ES_INDEX, ES_TYPE, record)
    await sleep(config.WAIT_TIME)
  }
      {{/x-put-method}}
      {{#x-delete-method}}
  const {{baseName}}IndexDelete = async (id) => {
    await es.removeModelIndex(ES_INDEX, ES_TYPE, id)
    await sleep(config.WAIT_TIME)
  }
      {{/x-delete-method}}
    {{/vendorExtensions}}
  {{/operation}}
{{/operations}}
  // TODO: change operations to right methods
{{#operations}}
  {{#operation}}
    {{#vendorExtensions}}
      {{^x-head-method}}
      {{#x-post-method}}
  const createOperation = async (body, user) => {
    const result = await {{classname}}Service.create{{caseReturnType}}(body, user)
    return result
  }
      {{/x-post-method}}
      {{#x-get-method}}
        {{#isListContainer}}
  const searchOperation = async (body, _user) => {
    const result = await {{classname}}Service.search{{caseReturnType}}(body)
    return result
  }
        {{/isListContainer}}
        {{^isListContainer}}
  const getOperation = async (id, _user) => {
    const result = await {{classname}}Service.get{{caseReturnType}}(id)
    return result
  }
        {{/isListContainer}}
      {{/x-get-method}}
      {{#x-put-method}}
  const updateOperation = async (id, body, user) => {
    const result = await {{classname}}Service.update{{caseReturnType}}(id, body, user)
    return result
  }
      {{/x-put-method}}
      {{#x-patch-method}}
  const partiallyUpdateOperation = async (id, body, user) => {
    const result = await {{classname}}Service.partiallyUpdate{{caseReturnType}}(id, body, user)
    return result
  }
      {{/x-patch-method}}
      {{#x-delete-method}}
  const deleteOperation = async (id, _user) => {
    const result = await {{classname}}Service.remove{{caseReturnType}}(id)
    return result
  }
      {{/x-delete-method}}
      {{/x-head-method}}
    {{/vendorExtensions}}
  {{/operation}}
{{/operations}}

{{#operations}}
{{#operation}}
  {{#vendorExtensions}}
    {{^x-head-method}}
  xdescribe('{{operationId}} endpoint', () => {
  {{#x-post-method}}
    // TODO UNIT
    const body = 'Should copy from e2e'
  {{/x-post-method}}
  {{#x-put-method}}
    // TODO UNIT:
    const id = {{baseName}}_A_ID
    const body = 'Should copy from e2e'
  {{/x-put-method}}
  {{#x-patch-method}}
    // TODO UNIT
    const id = {{baseName}}_A_ID
    const body = 'Should copy from e2e'
  {{/x-patch-method}}
    describe('success request', () => {
    {{#x-get-method}}
      {{#isListContainer}}
      const assertSearch = async (criteria, filters) => {
        const record = await searchOperation(criteria)
        if (criteria.page) {
          should.equal(record.length || record.result.length, criteria.perPage)
          if (record.total) {
            should.equal(record.total, filters.length)
          }
        } else {
          if (filters.length === 0) {
            should.equal(0, record.length || record.result.length)
          } else {
            await assert.{{caseReturnType}}SearchBody(record.result || record, filters)
          }
        }
      }
      // TODO UNIT:
      // test different search conditions
      const includesQuery = {
      {{#queryParams}}
        {{#isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(includesQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            const filters = RECORDS.filter(item =>
              String(item[key]).toLowerCase().includes(String(value).toLowerCase()))
            await assertSearch({ [key]: value }, filters)
          })
        })
      })
      const equalQuery = {
      {{#queryParams}}
        {{^isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(equalQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            const filters = RECORDS.filter(item => item[key] === value)
            await assertSearch({ [key]: value }, filters)
          })
        })
      })
      xit('200 - should success when no condition', async () => {
        await assertSearch({}, RECORDS)
      })
      xit('200 - should success when pagination', async () => {
        const criteria = {
          page: 2,
          perPage: 2,
          name: 'la'
        }
        const filters = RECORDS.filter(item =>
          String(item['name']).toLowerCase().includes(String('la').toLowerCase()))
        await assertSearch(criteria, filters)
      })
      {{/isListContainer}}
      {{^isListContainer}}
      xit('200 - should success when find by id', async () => {
        const id = newIds[0]
        const record = await getOperation(id, ADMIN_USER)
        const obj = RECORDS.find(item => item.id === id)
        await assert.{{caseReturnType}}GetBody(record, obj)
      })
      {{/isListContainer}}
    {{/x-get-method}}
    {{#x-post-method}}
      const assertCreate = async (param) => {
        // TODO: change search condition if need
        const oldObj = await searchOperation({ name: param.body.name }, param.user)
        should.equal(param.oldCount, oldObj.result.length)
        const record = await createOperation(param.body, param.user)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexCreate(record)
        const newObj = await getOperation(record.id, param.user)
        should.equal(true, moment(record.createdAt).isSameOrAfter(beforeTest))
        await assert.{{caseReturnType}}CreateBody(record, newObj, param.userId)
        await assert.{{caseReturnType}}CreateBody(record, param.body)
        RECORDS.push(record)
        newIds.push(record.id)
      }
      // TODO UNIT:
      const bodies = [
        _.assign({}, body, { name: body.name + ` admin test` }),
        _.assign({}, body, { name: body.name + ` copilot test` }),
        _.assign({}, body, { name: body.name + ` m2m test` }),
        _.assign({}, body, { name: body.name + ` more test` })
      ]
      const users = [
        COPILOT_USER,
        ADMIN_USER,
        M2M_USER,
        ..._.fill(new Array(bodies.length - 3), COPILOT_USER)
      ]
      const params = th.matchParamsFromBodies(bodies, users)
      // execute tests
      _.each(params, param => {
        it(`201 - should success when create with ${param.title}`, async () => {
          await assertCreate(param)
        })
      })
    {{/x-post-method}}
    {{#x-delete-method}}
      const assertDelete = async (aId, user) => {
        const oldObj = await getOperation(aId, ADMIN_USER)
        should.exist(oldObj)
        await deleteOperation(aId, user)
        try {
          await getOperation(aId, ADMIN_USER)
        } catch (err) {
          should.equal(err.message, `{{caseReturnType}} with id: ${aId} does not exist`)
          should.equal(err.httpStatus, httpStatus.NOT_FOUND)
        }
      }
      // TODO UNIT
      _.each(RECORDS, record => {
        it('204 - should success when delete by id', async () => {
          await assertDelete(record.id, ADMIN_USER)
        })
      })
    {{/x-delete-method}}
    {{#x-put-method}}
      const assertUpdate = async (aId, aBody, user) => {
        const oldObj = await getOperation(aId, ADMIN_USER)
        const record = await updateOperation(aId, aBody, user)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexUpdate(record)
        const newObj = await getOperation(aId, ADMIN_USER)
        should.not.equal(JSON.stringify(oldObj), JSON.stringify(aBody))
        await assert.{{caseReturnType}}UpdateBody(record, newObj)
        await assert.{{caseReturnType}}UpdateBody(record, aBody)
      }
      // TODO UNIT
      const bodies = [
        {
          name: 'fully changed'
        },
        body
      ]
      const ids = [
        ..._.fill(new Array(bodies.length), id)
      ]
      const users = [
        ..._.fill(new Array(bodies.length), ADMIN_USER)
      ]
      _.each(bodies, (aBody, index) => {
        it(`200 - should success when update with '${JSON.stringify(aBody.body)}'`, async () => {
          await assertUpdate(ids[index], aBody, users[index])
        })
      })
    {{/x-put-method}}
    {{#x-patch-method}}
      const assertPartiallyUpdate = async (aId, aBody, user) => {
        const oldObj = await getOperation(aId, ADMIN_USER)
        const record = await partiallyUpdateOperation(aId, aBody, user)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexUpdate(record)
        const newObj = await getOperation(aId, ADMIN_USER)
        _.each(aBody, (value, key) => {
          if (_.isArray(value)) {
            if (body !== aBody) {
              should.not.equal(JSON.stringify(oldObj[key], JSON.stringify(value)))
            }
            should.equal(JSON.stringify(newObj[key]), JSON.stringify(value))
          } else {
            if (body !== aBody) {
              should.not.equal(oldObj[key], newObj[key])
            }
            should.equal(newObj[key], value)
          }
        })
        await assert.{{caseReturnType}}UpdateBody(record, newObj)
        await assert.{{caseReturnType}}UpdateBody(record, aBody)
      }
      const bodies = [
      {{#bodyParams}}
        {{#isModel}}
          {{#vendorExtensions}}
            {{#x-refModel}}
              {{#vars}}
        {
          {{baseName}}: body.{{baseName}} + '-partially update'
        },
              {{/vars}}
            {{/x-refModel}}
          {{/vendorExtensions}}
        {{/isModel}}
        {{^isModel}}
        {
          {{baseName}}: body.{{baseName}} + '-partially update'
        },
        {{/isModel}}
      {{/bodyParams}}
        body
      ]
      const ids = [
        ..._.fill(new Array(bodies.length), id)
      ]
      _.each(bodies, (aBody, index) => {
        it(`200 - should success when update with ${JSON.stringify(aBody)}`, async () => {
          await assertPartiallyUpdate(ids[index], aBody, ADMIN_USER)
        })
      })
    {{/x-patch-method}}

    {{#x-valid-methods}}
      {{^isFailValidate}}
      // title: '{{title}}'
      {{/isFailValidate}}
    {{/x-valid-methods}}
    });

    xdescribe('fail request', () => {
      {{#x-post-method}}
      const param = {
        user: ADMIN_USER,
        body
      }
      const requests = []
      // TODO UNIT
      // test invalid param
      requests.push(...th.genStringTests(
        ['name'],
        td.STRING_INVALIDS,
        param
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [_.assign({}, body, { invalid: 'invalid' }), ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        }
      ])
      // execute tests
      _.each(requests, request => {
        request.operation = createOperation
        th.failItService(request)
      })
      {{/x-post-method}}
      {{#x-delete-method}}
      const requests = []
      // TODO UNIT
      requests.push(...[
        {
          title: '400 - {{caseReturnType}}Id: should fail when not string',
          params: [123, ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustString('{{caseReturnType}}Id').message
        },
        {
          title: '400 - {{caseReturnType}}Id: should fail when not guid',
          params: ['abc', ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when not exist',
          params: [td.NO_EXIST_ID, ADMIN_USER],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      {{/x-delete-method}}
      {{#x-get-method}}
        {{#isListContainer}}
      const param = {
        user: ADMIN_USER,
        body: {},
        isSearch: true
      }
      const requests = []
      // TODO UNIT
      // test invalid params
      requests.push(...th.genStringTests(
        [{{#queryParams}}{{#isString}}'{{baseName}}', {{/isString}}{{/queryParams}}],
        td.STRING_INVALIDS.filter(item => !_.isUndefined(item)),
        param
      ))
      requests.push(...th.genBooleanTests(
        [{{#queryParams}}{{#isBoolean}}'{{baseName}}', {{/isBoolean}}{{/queryParams}}],
        td.BOOLEAN_INVALIDS,
        param
      ))
      requests.push(...th.genGuidTests(
        ['id', 'typeId', 'timelineTemplateId'],
        ['', 'abc'],
        param
      ))
      requests.push(...th.genNumberTests(
        ['page'],
        td.PAGE_INVALIDS,
        _.assign({}, param, {
          min: 1,
          needInteger: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['perPage'],
        td.PERPAGE_INVALIDS,
        _.assign({}, param, {
          min: 1,
          max: 100,
          needInteger: true
        })
      ))
      requests.push(...th.genDateTests(
        ['createdDateStart'],
        td.DATE_INVALIDS.filter(value => !_.isUndefined(value)),
        param
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [{ invalid: 'invalid' }, ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        }
      ])
      // execute tests
      _.each(requests, request => {
        request.operation = searchOperation
        th.failItService(request)
      })
        {{/isListContainer}}
        {{^isListContainer}}
      const requests = [
        {
          title: '400 - {{caseReturnType}}Id: should fail when not string',
          params: [123, ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustString('{{caseReturnType}}Id').message
        },
        {
          title: '400 - {{caseReturnType}}Id: should fail when not guid',
          params: ['abc', ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when not exist',
          params: [td.NO_EXIST_ID, ADMIN_USER],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ]
      // execute tests
      _.each(requests, request => {
        request.operation = getOperation
        th.failItService(request)
      })
        {{/isListContainer}}
      {{/x-get-method}}
      {{#x-put-method}}
      const param = {
        id,
        body
      }
      const requests = []
      // TODO UNIT
      requests.push(...th.genStringTests(
        ['name'],
        td.STRING_INVALIDS,
        param
      ))

      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [id, _.assign({}, body, { invalid: 'invalid' }), ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        },
        {
          title: '400 - {{caseReturnType}}Id: should fail when not string',
          params: [123, body, ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustString('{{caseReturnType}}Id').message
        }, {
          title: '400 - {{caseReturnType}}Id: should fail when invalid uuid format',
          params: ['abc', body, ADMIN_USER],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when id not exist',
          params: [td.NO_EXIST_ID, body, ADMIN_USER],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // execute tests
      _.each(requests, request => {
        request.operation = updateOperation
        th.failItService(request)
      })
      {{/x-put-method}}
      {{#x-patch-method}}
        const param = { id, body, user: ADMIN_USER }
        const requests = []
        // TODO UNIT
        // test invalid params
        requests.push(...th.genStringTests(
          ['name'],
          td.STRING_INVALIDS,
          param
        ))
        requests.push(...[
          {
            title: '400 - should fail when invalid params',
            params: [id, _.assign({}, body, { invalid: 'invalid' }), ADMIN_USER],
            status: httpStatus.BAD_REQUEST,
            message: jom.notAllow('invalid').message
          },
          {
            title: '400 - {{caseReturnType}}Id: should fail when not string',
            params: [123, body, ADMIN_USER],
            status: httpStatus.BAD_REQUEST,
            message: jom.mustString('{{caseReturnType}}Id').message
          }, {
            title: '400 - {{caseReturnType}}Id: should fail when invalid uuid format',
            params: ['abc', body, ADMIN_USER],
            status: httpStatus.BAD_REQUEST,
            message: jom.mustGuid('{{caseReturnType}}Id').message
          },
          {
          title: '404 - {{caseReturnType}}Id: should fail when id not exist',
            params: [td.NO_EXIST_ID, body, ADMIN_USER],
            status: httpStatus.NOT_FOUND,
            message: td.ErrorMessage.{{baseName}}_Not_Exist
          }
        ])
        // execute tests
        _.each(requests, request => {
          request.operation = partiallyUpdateOperation
          th.failItService(request)
        })
      {{/x-patch-method}}
  {{#x-valid-methods}}
    {{#isFailValidate}}
      // title: '{{title}}'
    {{/isFailValidate}}
  {{/x-valid-methods}}
    });
  })
    {{/x-head-method}}
  {{/vendorExtensions}}
{{/operation}}

{{/operations}}
})
