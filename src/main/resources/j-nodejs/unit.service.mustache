/**
* Unit test of the {{baseName}}.
*/
const _ = require('lodash')
const merge = require('merge-deep')
const config = require('config')
const should = require('should')
const { User } = require('../lib/testData')
const { loadData } = require('../../scripts/tools')
const Constants = require('../../src/constants')
const {{classname}}Service = require('../../src/service/service.{{classname}}')

const errorCase = new Error('should not throw error here')

module.exports = describe('{{baseName}} resource', () => {
  let SheetData
  before(async () => {
    SheetData = await loadData()
  })

{{#operations}}
{{#operation}}
  describe('{{operationIdSnakeCase}} endpoint', () => {
    const reqBody = {}

  {{#vendorExtensions}}
    {{#x-get-method}}
      {{#responses.isListContainer}}
    const assert{{baseName}}SearchBody = async (record, queryParams, isSuccess) => {
    }
      {{/responses.isListContainer}}
      {{^responses.isListContainer}}
    const assert{{baseName}}GetBody = async (record, {{#pathParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/pathParams}}, isSuccess) => {
    }
      {{/responses.isListContainer}}
    {{/x-get-method}}
    {{#x-post-method}}
    const assert{{baseName}}CreateBody = async (record, isSuccess) => {
    }
    {{/x-post-method}}
    {{#x-delete-method}}
    const assert{{baseName}}DeleteBody = async (record, isSuccess) => {
    }
    {{/x-delete-method}}
    {{#x-put-method}}
    const assert{{baseName}}UpdateBody = async (record, {{#pathParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/pathParams}}, isSuccess) => {
    }
    {{/x-put-method}}
    {{#x-patch-method}}
    const assert{{baseName}}PartialUpdateBody = async (record, {{#pathParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/pathParams}}, isSuccess) => {
    }
    {{/x-patch-method}}
  {{/vendorExtensions}}

    before(async () => {
    })

  {{#vendorExtensions}}
    {{#x-valid-methods}}
    it('{{title}}', async () => {
      {{#isFailValidate}}
      try {
        const params = merge(reqBody, { })
        await {{classname}}Service.{{operationId}}(params, User.user1())
        throw errorCase
      } catch (err) {
        should.equal(err.status, {{statusCode}})
        should.equal(`message required`, err.message)
      }
      {{/isFailValidate}}
      {{^isFailValidate}}
      const params = merge(reqBody, { })
      const ret = await {{classname}}Service.{{operationId}}(params, User.user1())
      {{#isGetById}}
      await assert{{baseName}}GetBody(ret, {{#pathParams}}ret.{{paramName}},{{/pathParams}} true)
      {{/isGetById}}
      {{#isSearch}}
      await assert{{baseName}}SearchBody(ret, queryParams, true)
      {{/isSearch}}
      {{#isCreate}}
      await assert{{baseName}}CreateBody(ret, true)
      {{/isCreate}}
      {{#isUpdateById}}
      await assert{{baseName}}UpdateBody(ret, true)
      {{/isUpdateById}}
      {{#isPartialUpdateById}}
      await assert{{baseName}}PartialUpdateBody(ret, true)
      {{/isPartialUpdateById}}
      {{#isDeleteById}}
      await assert{{baseName}}DeleteBody(ret, true)
      {{/isDeleteById}}
      {{/isFailValidate}}
    })

    {{/x-valid-methods}}
  {{/vendorExtensions}}
  })
{{/operation}}

{{/operations}}
})
