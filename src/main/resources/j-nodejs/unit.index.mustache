/**
 * Unit test of the {{openAPI.info.title}}.
 */

process.env.NODE_ENV = 'test'

require('../../src/bootstrap')

const config = require('config')
const logger = require('../../src/lib/logger')
const testHelper = require('../lib/testHelper')
const { cleanData, initData } = require('../../scripts/tools')

describe('{{openAPI.info.title}} Unit Test', () => {
  let app
  let infoLogs = []
  let errorLogs = []
  let debugLogs = []
  const info = logger.info
  const error = logger.error
  const debug = logger.debug

  /**
   * Sleep with time from input
   * @param time the time input
   */
  const sleep = (time) => new Promise((resolve) => {
    setTimeout(resolve, time)
  })

  /**
   * Close http server
   * @param {Object} server the server
   */
  const closeServer = (server) => new Promise((resolve) => {
    server.close(() => {
      resolve()
    })
  })

  before(async () => {
    // inject logger with log collector
    logger.info = (message) => {
      infoLogs.push(message)
      info(message)
    }
    logger.debug = (message) => {
      debugLogs.push(message)
      debug(message)
    }
    logger.error = (message) => {
      errorLogs.push(message)
      error(message)
    }

    testHelper.initLogs(errorLogs)

    // start the application
    app = require('../../app')

    // wait until application init successfully
    while (true) {
      if (infoLogs.some(x => String(x).includes('Server running on http://localhost:'))) {
        break
      }
      await sleep(config.WAIT_TIME)
    }

    await cleanData()
    await initData()
  })

  after(async () => {
    // close server
    await closeServer(app)

    // restore logger
    logger.error = error
    logger.info = info
    logger.debug = debug
  })

  describe('Service Unit Test', () => {
{{#apiInfo}}
  {{#apis}}
    require('./service.{{classname}}.test')
  {{/apis}}
{{/apiInfo}}
  })
})
