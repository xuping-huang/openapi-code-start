/**
 * Unit test of the {{openAPI.info.title}}.
 */

process.env.NODE_ENV = 'test'

require('../../src/bootstrap')
const config = require('config')
const logger = require('../../src/common/logger')
const { cleanData, initData } = require('../../scripts/tools')
const { loadES } = require('../../scripts/esload-helper')

describe('{{openAPI.info.title}} Unit Test', () => {
  let infoLogs = []
  let errorLogs = []
  let debugLogs = []
  const info = logger.info
  const error = logger.error
  const debug = logger.debug
  const fullError = logger.logFullError

  /**
   * Sleep with time from input
   * @param time the time input
   */
  const sleep = (time) => new Promise((resolve) => {
    setTimeout(resolve, time)
  })

  before(async () => {
    // inject logger with log collector
    logger.info = (message) => {
      infoLogs.push(message)
      info(message)
    }
    logger.debug = (message) => {
      debugLogs.push(message)
      debug(message)
    }
    logger.error = (message) => {
      errorLogs.push(message)
    }
    logger.logFullError = (message) => {
      errorLogs.push(message)
    }

    await initData()
    // TODO FIRST: remove if no need elastic search
    await loadES()
    await sleep(config.WAIT_TIME)

    // TODO: remove if no mock api
    // start the application
    require('../../mock-api/app')
    // wait until application init successfully
    while (true) {
      if (infoLogs.some(x => String(x).includes('Express mock server listening on port'))) {
        break
      }
      await sleep(config.WAIT_TIME)
    }
  })

  after(async () => {
    // restore logger
    logger.error = error
    logger.info = info
    logger.debug = debug
    logger.logFullError = fullError
  })

  describe('Service Unit Test', () => {
{{#apiInfo}}
  {{#apis}}
    require('./service.{{classname}}.test')
  {{/apis}}
{{/apiInfo}}
  })
})
