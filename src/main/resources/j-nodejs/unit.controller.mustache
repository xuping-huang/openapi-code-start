/*
* Unit testing of {{baseName}} Controller with mocks
*/

const chai = require('chai')
const expect = chai.expect
const chaiAsPromised = require('chai-as-promised')
const sinon = require('sinon')
const sinonChai = require('sinon-chai')
const merge = require('merge-deep')
const uuidv1 = require('uuid/v1')
chai.use(chaiAsPromised)
chai.use(sinonChai)
chai.should()

const testData = require('../../lib/test-data')
const testHelper = require('../../lib/test-helper')
const controller = require('../../../src/controller/{{classFilename}}')
const {{classname}}Service = require('../../../src/service/service.{{classname}}')

const req = {
  query: {},
  body: {},
  params: {}
}
let status, json, res, next

describe('{{baseName}} Unit Test', () => {
  {{#operations}}
  {{#operation}}
  let {{nickname}}Stub
  {{/operation}}
  {{/operations}}
  beforeEach(() => {
  {{#operations}}
  {{#operation}}
    {{nickname}}Stub = sinon.stub({{classname}}Service, '{{nickname}}').returns(testData.{{baseName}})
  {{/operation}}
  {{/operations}}

    status = sinon.stub()
    json = (data) => { return JSON.parse(data) }
    status.returns({ json })
    res = { status, json }
    next = sinon.stub().returnsArg(0)
  })

  afterEach(() => {
  {{#operations}}
  {{#operation}}
    {{classname}}Service.{{nickname}}.restore()
  {{/operation}}
  {{/operations}}
  })

  {{#operations}}
  {{#operation}}
  describe('{{nickname}} controller test', () => {
    it('Verify that the {{nickname}} service is called', async () => {
      const reqParam = merge(req, testData.{{baseName}})
      const data = await controller.{{nickname}}(reqParam, res, next)
      return Promise.all([
        {{nickname}}Stub.should.have.been.calledOnce
        testHelper.assert{{baseName}}(data, testData.{{baseName}})
      ])
    })
  })

  {{/operation}}
  {{/operations}}
})
