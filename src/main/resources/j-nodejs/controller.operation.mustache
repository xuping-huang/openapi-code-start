/**
* {{baseName}} Controller
*/

const merge = require('merge-deep')
const httpStatus = require('http-status')
const helper = require('../lib/helper')

const {{classname}}Service = require('../service/service.{{classname}}')

{{#operations}}
{{#operation}}
{{#swgdoc}}
/**
 * @swagger
 * {{path}}:
 *   {{httpMethod}}:
 *     description: {{summary}}
 *     tags:
         {{#tags}}
 *       - {{name}}
         {{/tags}}
 *     produces:
         {{#produces}}
 *       - {{mediaType}}
         {{/produces}}
 *     parameters:
         {{#allParams}}
 *       - name: {{paramName}}
 *         description: {{description}}
 *         in: {{#isFormParam}}formData{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}
 *         required: {{#isPathParam}}true{{/isPathParam}}{{#isBodyParam}}true{{/isBodyParam}}{{#isFormParam}}true{{/isFormParam}}{{#isQueryParam}}false{{/isQueryParam}}{{#isHeaderParam}}false{{/isHeaderParam}}
           {{#isRefObject}}
 *         schema:
 *           $ref: #/definitions/{{refObjectName}}
           {{/isRefObject}}
           {{^isRefObject}}
           {{#isUuid}}
 *         type: string
           {{/isUuid}}
           {{^isUuid}}
 *         type: {{dataType}}
           {{/isUuid}}
           {{#isListContainer}}
 *         items:
           {{#isContainer}}
 *           type: #/definitions/{{complexType}}
           {{/isContainer}}
           {{^isContainer}}
 *           type: {{dataType}}
           {{/isContainer}}
           {{/isListContainer}}
           {{^isListContainer}}
           {{#dataFormat}}
 *         format: {{dataFormat}}
           {{/dataFormat}}
           {{#min}}
 *         min: {{min}}
           {{/min}}
           {{#max}}
 *         max: {{max}}
           {{/max}}
           {{#maxLength}}
 *         maxLength: {{maxLength}}
           {{/maxLength}}
           {{#minLength}}
 *         minLength: {{minLength}}
           {{/minLength}}
           {{#minimum}}
 *         minimum: {{minimum}}
           {{/minimum}}
           {{#maximum}}
 *         maximum: {{maximum}}
           {{/maximum}}
           {{#exclusiveMinimum}}
 *         exclusiveMinimum: {{exclusiveMinimum}}
           {{/exclusiveMinimum}}
           {{#exclusiveMaximum}}
 *         exclusiveMaximum: {{exclusiveMaximum}}
           {{/exclusiveMaximum}}
           {{#isEnum}}
 *         enum:
           {{#_enum}}
 *           - {{.}}
           {{/_enum}}
           {{/isEnum}}
           {{/isListContainer}}
           {{/isRefObject}}
         {{/allParams}}
 *     responses:
         {{#responses}}
 *       {{code}}:
 *         description: {{message}}
 *         schema:
 *           $ref: {{schema.genericRef.ref}}
         {{/responses}}
 */
{{/swgdoc}}
{{^swgdoc}}
/**
 * {{notes}}
 * @param {Object} req - the request object
 * @param {Object} res - the response object
 * @param {Function} next - pass process control to the next component.
 */
{{/swgdoc}}
module.exports.{{nickname}} = async (req, res, next) => {
  const params = merge(req.query, req.body, req.params)
  const data = await {{classname}}Service.{{nickname}}(params)
  {{#vendorExtensions}}
  {{#x-get-method}}
  {{#isListContainer}}
  const pagingData = helper.formatPagingData(req, data)
  res.set(pagingData.Headers).json(pagingData.Items)
  {{/isListContainer}}
  {{^isListContainer}}
  res.json(data)
  {{/isListContainer}}
  {{/x-get-method}}
  {{#x-post-method}}
  res.status(httpStatus.CREATED).json(data)
  {{/x-post-method}}
  {{#x-put-method}}
  res.json(data)
  {{/x-put-method}}
  {{#x-patch-method}}
  res.json(data)
  {{/x-patch-method}}
  {{#x-delete-method}}
  res.json(data)
  {{/x-delete-method}}
  {{/vendorExtensions}}
}

{{/operation}}
{{/operations}}
