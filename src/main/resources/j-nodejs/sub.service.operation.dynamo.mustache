{{#vendorExtensions}}
  {{^x-head-method}}
/**
{{#x-get-method}}
  {{#isListContainer}}
 * Retrieve {{spaceReturnType}} data in the system.
 * @param {Object} params - the search conditions
 * @return {Promise} a collection of {{spaceReturnType}}
 **/
async function {{nickname}} (params) {
  const records = await helper.scan(Table.{{baseName}})
  const filter = _.filter(records, obj => {
    return true
  })
  return filter
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  params: Joi.object().keys({
   {{#queryParams}}
  {{> sub.joiParam}}
   {{/queryParams}}
  })
}
    {{/isListContainer}}
    {{^isListContainer}}
 * Retrieve a {{spaceReturnType}} by id.
 * @param {String} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @return {Promise} the {{spaceReturnType}} obtained by id.
 **/
async function {{nickname}} ({{caseReturnType}}Id) {
  const resource = await helper.getById(Table.{{baseName}}, {{caseReturnType}}Id)
  return resource
}

{{nickname}}.schema = {
  {{caseReturnType}}Id: Joi.string().uuid().required()
}
    {{/isListContainer}}
  {{/x-get-method}}
  {{#x-post-method}}
 * Create a new {{spaceReturnType}} in the system.
 * @param {Object} params - the contents of a new {{spaceReturnType}}
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the created {{spaceReturnType}}
 **/
async function {{nickname}} (params, currentUser) {
  const ret = await helper.create(Table.{{baseName}}, _.assign({
     id: uuid(),
     createdBy: currentUser.handle || currentUser.sub,
     updatedBy: currentUser.handle || currentUser.sub
   }, params))
   return ret
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-post-method}}
  {{#x-put-method}}
 * Update a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} params - the properties of {{spaceReturnType}} to be updated
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the updated {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id, params, currentUser) {
  const obj = await get{{returnType}}({{caseReturnType}}Id)
  const data = {
    updatedBy: currentUser.handle || currentUser.sub
  }
  _.each(params, (value, key) => {
    data[key] = value
  })
  const ret = await helper.update(obj, data)
  return ret
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  {{caseReturnType}}Id: Joi.string().uuid().required(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-put-method}}
  {{#x-patch-method}}
 * Update partial content of a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} params - the properties of {{spaceReturnType}} to update
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the updated {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id, params, currentUser) {
  const obj = await get{{returnType}}({{caseReturnType}}Id)
  const data = {
    updatedBy: currentUser.handle || currentUser.sub
  }
  _.each(params, (value, key) => {
    data[key] = value
  })
  const ret = await helper.update(obj, data)
  return ret
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  {{caseReturnType}}Id: Joi.string().uuid().required(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-patch-method}}
  {{#x-delete-method}}
 * Delete a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the deleted {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id) {
  await get{{returnType}}({{caseReturnType}}Id)
  await helper.delete(Table.{{baseName}}, {{caseReturnType}}Id)
}

{{nickname}}.schema = {
  {{caseReturnType}}Id: Joi.string().uuid().required()
}
  {{/x-delete-method}}
  {{/x-head-method}}
{{/vendorExtensions}}
