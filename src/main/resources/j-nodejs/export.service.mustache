const debug = require('debug')('api:service')
const merge = require('merge-deep')
const { NotFoundError } = require('../lib/app-error')
const { {{baseName}}Model } = require('../model/index')

{{#operations}}
{{#operation}}
/**
 * Create a new challenge in the system.
 * @param {object} params - {{#vendorExtensions}}{{#x-get-method}}the search conditions{{/x-get-method}}{{#x-post-method}}the obj to create{{/x-post-method}}{{#x-put-method}}the obj to update{{/x-put-method}}{{#x-patch-method}}the property of obj to update{{/x-patch-method}}{{#x-delete-method}}the delete conditions{{/x-delete-method}}{{/vendorExtensions}}
 * @param {object} user - user info
 * @return {object} the result data
 **/
exports.{{nickname}} = async (params, user) => {
  try {
    {{#vendorExtensions}}
    {{#x-post-method}}
    const now = new Date()
    const mergeData = merge(params, {
      created: now.toISOString(),
      createdBy: user.userId,
      updated: now.toISOString(),
      updatedBy: user.userId
    })
    const model = new {{baseName}}Model(mergeData)
    const data = await model.save(user.userId)
    {{/x-post-method}}
    {{#x-get-method}}
    {{#isListContainer}}
    const model = new {{baseName}}Model()
    const data = await model.search(params)
    {{/isListContainer}}
    {{^isListContainer}}
    const model = new {{baseName}}Model()
    const data = await model.findById(params)
    if (!data) {
      return Promise.reject(new NotFoundError(`{{baseName}} id '' not found`))
    }
    {{/isListContainer}}
    {{/x-get-method}}
    {{#x-put-method}}
    let model = new {{baseName}}Model()
    const oldObj = await model.findById(params)
    if (!oldObj) {
      return Promise.reject(new NotFoundError(`{{baseName}} id '' not found`))
    }

    const now = new Date()
    const mergeData = merge(params, {
      updated: now.toISOString(),
      updatedBy: user.userId
    })
    model = new {{baseName}}Model(mergeData)
    const data = await model.update()
    {{/x-put-method}}
    {{#x-patch-method}}
    let model = new {{baseName}}Model()
    const oldObj = await model.findById(params)
    if (!oldObj) {
      return Promise.reject(new NotFoundError(`{{baseName}} id '' not found`))
    }

    const now = new Date()
    const mergeData = merge(oldObj, params, {
      updated: now.toISOString(),
      updatedBy: user.userId
    })
    model = new {{baseName}}Model(mergeData)
    const data = await model.update()
    {{/x-patch-method}}
    {{#x-delete-method}}
    const model = new {{baseName}}Model(params)
    const data = await model.delete()
    {{/x-delete-method}}
    {{/vendorExtensions}}
    return Promise.resolve(data)
  } catch (err) {
    return Promise.reject(err)
  }
}
{{/operation}}
{{/operations}}
