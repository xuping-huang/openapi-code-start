{{#vendorExtensions}}
  {{^x-head-method}}
/**
{{#x-get-method}}
  {{#isListContainer}}
 * Retrieve {{spaceReturnType}} data in the system.
 * @param {Object} params - the search conditions
 * @return {Promise} a collection of {{spaceReturnType}}
 **/
async function {{nickname}} (params) {
  {{^elasticSearch}}
  let options = {
    where: params,
    raw: true
  }
  const records = await Model.{{caseReturnType}}Model.findAll(options)
  const filter = _.filter(records, obj => {
    return true
  })
  // return filter
  const total = filter.length
  const result = filter.slice((params.page - 1) * params.perPage, params.page * params.perPage)
  return { total, page: criteria.page, perPage: criteria.perPage, result }
  {{/elasticSearch}}
  {{#elasticSearch}}
  // TODO: remove below line if elastic search
  // let options = {
  //   where: params,
  //   raw: true
  // }
  // const records = await Model.{{caseReturnType}}Model.findAll(options)
  // const filter = _.filter(records, obj => {
  //   return true
  // })
  // // return filter
  // const total = filter.length
  // const result = filter.slice((params.page - 1) * params.perPage, params.page * params.perPage)
  // return { total, page: criteria.page, perPage: criteria.perPage, result }
  const boolQuery = []
  const esQuery = {
    index: config.get('ES.INDEXES.ES_{{upperSnakeReturnType}}_INDEX'),
    type: config.get('ES.ES_TYPE'),
    size: params.perPage,
    from: (params.page - 1) * params.perPage, // Es Index starts from 0
    body: {
      query: {
        bool: {
          filter: boolQuery
        }
      },
      sort: [{ 'createdAt': { 'order': 'asc' } }]
    }
  }
  // get ES client
  const esClient = helper.getESClient()
  // Search with constructed query
  const docs = await esClient.search(esQuery)
  // Extract data from hits
  const total = docs.hits.total
  const result = _.map(docs.hits.hits, item => item._source)
  return { total, page: params.page, perPage: params.perPage, result }
  {{/elasticSearch}}
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  params: Joi.object().keys({
   {{#queryParams}}
  {{> sub.joiParam}}
   {{/queryParams}}
  })
}
    {{/isListContainer}}
  {{^isListContainer}}
 * Retrieve a {{spaceReturnType}} by id.
 * @param {String} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @return {Promise} the {{spaceReturnType}} obtained by id.
 **/
async function {{nickname}} ({{caseReturnType}}Id) {
  {{#elasticSearch}}
  // TODO: remove below line if not need
  // const resource = await Model.{{caseReturnType}}Model.findByPk(params.id, { raw: true })
  // if (!resource) {
  //   return Promise.reject(new error.NotFoundError(`{{caseReturnType}} id '${params.id}' not found`))
  // }
  const esClient = helper.getESClient()
  let resource
  try {
    resource = await esClient.getSource({
      index: config.get('ES.INDEXES.{{upperSnakeReturnType}}_INDEX'),
      type: config.get('ES.ES_TYPE'),
      id: {{caseReturnType}}Id
    })
  } catch (e) {
    if (e.statusCode === HttpStatus.NOT_FOUND) {
      throw new errors.NotFoundError(`{{baseName}} with id: ${ {{caseReturnType}}Id } does not exist`)
    } else {
      throw e
    }
  }
  {{/elasticSearch}}
  {{^elasticSearch}}
  const resource = await Model.{{caseReturnType}}Model.findByPk(params.id, { raw: true })
  if (!resource) {
    return Promise.reject(new error.NotFoundError(`{{caseReturnType}} id '${params.id}' not found`))
  }
  {{/elasticSearch}}
  return resource
}

{{nickname}}.schema = {
  {{caseReturnType}}Id: Joi.string().uuid().required()
}
    {{/isListContainer}}
  {{/x-get-method}}
  {{#x-post-method}}
 * Create a new {{spaceReturnType}} in the system.
 * @param {Object} params - the contents of a new {{spaceReturnType}}
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the created {{spaceReturnType}}
 **/
async function {{nickname}} (params, currentUser) {
  const t = await sequelize.transaction()
  try {
    const data = _.assign({
      id: uuid(),
      createdBy: currentUser.handle || currentUser.sub,
      updatedBy: currentUser.handle || currentUser.sub
    }, params)
    const model = models.{{returnType}}Model.build(data)
    const ret = await model.save({ transaction: t })
    await t.commit()
     {{#kafka}}
    // post bus event
    await helper.postBusEvent(config.KAFKA_TOPIC.{{upperSnakeReturnType}}_CREATED, ret)
     {{/kafka}}
    return ret
  } catch (err) {
    await t.rollback()
    return Promise.reject(err)
  }
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-post-method}}
  {{#x-put-method}}
 * Update a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} params - the properties of {{spaceReturnType}} to be updated
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the updated {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id, params, currentUser) {
  const t = await sequelize.transaction()
  try {
    const obj = await get{{returnType}}({{caseReturnType}}Id)
    obj.updatedBy = currentUser.handle || currentUser.sub
    _.each(params, (value, key) => {
      obj[key] = value
    })
    const ret = await obj.save({ transaction: t })
    await t.commit()
    {{#kafka}}
    // post bus event
    await helper.postBusEvent(config.KAFKA_TOPIC.{{upperSnakeReturnType}}_UPDATED, ret)
    {{/kafka}}
    return ret
  } catch (err) {
    await t.rollback()
    return Promise.reject(err)
  }
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  {{caseReturnType}}Id: Joi.string().uuid().required(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-put-method}}
  {{#x-patch-method}}
 * Update partial content of a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} params - the properties of {{spaceReturnType}} to update
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the updated {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id, params, currentUser) {
  const t = await sequelize.transaction()
  try {
    const obj = await get{{returnType}}({{caseReturnType}}Id)
    obj.updatedBy = currentUser.handle || currentUser.sub
    _.each(params, (value, key) => {
      obj[key] = value
    })
    const ret = await obj.save({ transaction: t })
    await t.commit()
   {{#kafka}}
    // post bus event
    await helper.postBusEvent(config.KAFKA_TOPIC.{{upperSnakeReturnType}}_UPDATED,
      _.assignIn({ id: {{caseReturnType}}Id }, params))
   {{/kafka}}
    return ret
  } catch (err) {
    await t.rollback()
    return Promise.reject(err)
  }
}

{{nickname}}.schema = {
  currentUser: Joi.any(),
  {{caseReturnType}}Id: Joi.string().uuid().required(),
  params: Joi.object().keys({
   {{#bodyParams}}
     {{#isModel}}
       {{#vendorExtensions}}
       {{#x-refModel}}
         {{#vars}}
  {{> sub.joiParam}}
         {{/vars}}
       {{/x-refModel}}
       {{/vendorExtensions}}
     {{/isModel}}
     {{^isModel}}
  {{> sub.joiParam}}
     {{/isModel}}
   {{/bodyParams}}
  })
}
  {{/x-patch-method}}
  {{#x-delete-method}}
 * Delete a {{spaceReturnType}} in the system.
 * @param {Object} {{caseReturnType}}Id - the {{spaceReturnType}} id
 * @param {Object} currentUser - the user who perform operation
 * @return {Promise} the deleted {{spaceReturnType}}
 **/
async function {{nickname}} ({{caseReturnType}}Id) {
  const t = await sequelize.transaction()
  try {
    const ret = await get{{returnType}}({{caseReturnType}}Id)
    await model.destroy({ transaction: t })
    await t.commit()
   {{#kafka}}
    // post bus event
    await helper.postBusEvent(config.KAFKA_TOPIC.{{upperSnakeReturnType}}_DELETE, ret)
   {{/kafka}}
  } catch (err) {
    await t.rollback()
    return Promise.reject(err)
  }
}

{{nickname}}.schema = {
  {{caseReturnType}}Id: Joi.string().uuid().required()
}
  {{/x-delete-method}}
  {{/x-head-method}}
{{/vendorExtensions}}
