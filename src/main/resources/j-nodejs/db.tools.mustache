/**
* DB Scripts
*/
global.Promise = require('bluebird')
const fs = require('fs')
const path = require('path')
const _ = require('lodash')
const helper = require('../src/lib/helper')
const { Table } = require('../src/constants.js')
{{#orm_isSequelize}}
const models = require('../src/model/index')
const sequelize = require('../src/lib/db').dbSequelize
{{/orm_isSequelize}}

const TEST_USER_ID = '12345'

module.exports.cleanData = async () => {
{{#orm_isSequelize}}
  // await sequelize.truncate({ cascade: true })
  await sequelize.sync({ force: true })
{{/orm_isSequelize}}
{{#db_isDynamoDB}}
  {{#models}}
    {{#model}}
      {{#vendorExtensions}}
        {{#x-table-model}}
  const {{classname}}s = await helper.scan(Table.{{classname}})
  for (const record of {{classname}}s) {
    await record.delete()
  }
        {{/x-table-model}}
      {{/vendorExtensions}}
    {{/model}}
  {{/models}}
{{/db_isDynamoDB}}
}

module.exports.initData = async () => {
  const now = new Date()
{{#models}}
  {{#model}}
    {{#vendorExtensions}}
      {{#x-table-model}}
  const {{classname}}Data = fs.readFileSync(path.resolve(__dirname, './{{classname}}.json').toString()).toString()
  const {{classname}}s = JSON.parse({{classname}}Data)
  _.each({{classname}}s, async (data) => {
    await helper.create(Table.{{classname}}, _.assign({
      createdAt: now,
      createdBy: TEST_USER_ID,
      updatedAt: now,
      updatedBy: TEST_USER_ID
    }, data))
  })
      {{/x-table-model}}
    {{/vendorExtensions}}
  {{/model}}
{{/models}}
}
