/**
* E2E test of the {{baseName}}.
*/
const _ = require('lodash')
const config = require('config')
const should = require('chai').should()
const moment = require('moment')
const httpStatus = require('http-status')
const jom = require('../lib/jom')
const td = require('../lib/testData')
const th = require('../lib/testHelper')
const tc = require('../lib/testConstants')
const assert = require('../lib/assert')
const es = require('../../scripts/esload-helper')

const ADMIN_USER = td.Token.Admin
const COPILOT_USER = td.Token.Copilot
const COPILOT_USER2 = td.Token.Copilot2
const SUBMIT_USER = td.Token.User
const M2M_USER = td.Token.M2M
const beforeTest = moment()
let RECORDS = []
const newIds = []
const {{baseName}}_A_ID = undefined

module.exports = describe('{{baseName}} resource', () => {
  before(async () => {
    // TODO: change real name
    RECORDS = await th.loadData('{{baseName}}')
  })
  const sleep = (time) => new Promise((resolve) => {
    setTimeout(resolve, time)
  })
{{#operations}}
  {{#operation}}
    {{#vendorExtensions}}
      {{#x-post-method}}
  const {{baseName}}IndexCreate = async (record) => {
    await es.createModelIndex(ES_INDEX, ES_TYPE, record)
    await sleep(config.WAIT_TIME)
  }
      {{/x-post-method}}
      {{#x-put-method}}
  const {{baseName}}IndexUpdate = async (record) => {
    await es.updateModelIndex(ES_INDEX, ES_TYPE, record)
    await sleep(config.WAIT_TIME)
  }
      {{/x-put-method}}
      {{#x-delete-method}}
  const {{baseName}}IndexDelete = async (id) => {
    await es.removeModelIndex(ES_INDEX, ES_TYPE, id)
    await sleep(config.WAIT_TIME)
  }
      {{/x-delete-method}}
    {{/vendorExtensions}}
  {{/operation}}
{{/operations}}
  const formatCreateUrl = () => `${td.BaseUrl}/{{operations.pathPrefix}}s`
  const formatSearchUrl = (body) => {
  const query = th.buildQueryParams(body)
    return body ? `${formatCreateUrl()}${query}` : formatCreateUrl()
  }
  const formatGetUrl = id => `${td.BaseUrl}/{{operations.pathPrefix}}s/${id}`
  const formatUpdateUrl = id => formatGetUrl(id)
  const formatPartiallyUpdateUrl = id => formatGetUrl(id)
  const formatRemoveUrl = id => formatGetUrl(id)

{{#operations}}
  {{#operation}}
    {{#vendorExtensions}}
  xdescribe('{{operationId}} endpoint', () => {
        {{#x-post-method}}
    // TODO: change variable to right value
    const URL = formatCreateUrl()
    const createToken = td.M2M_TOKEN.{{upperReturnType}}_CREATE
    const outScopeToken = td.M2M_TOKEN.OTHER_CREATE
    // TODO UNIT: copy body to unit
    const body = {
    {{#bodyParams}}
      {{#isModel}}
        {{#vendorExtensions}}
          {{#x-refModel}}
            {{#vars}}
      {{baseName}}: '',
            {{/vars}}
          {{/x-refModel}}
        {{/vendorExtensions}}
      {{/isModel}}
      {{^isModel}}
      {{baseName}}: '',
      {{/isModel}}
    {{/bodyParams}}
    }
        {{/x-post-method}}
        {{#x-get-method}}
          {{#isListContainer}}
    // TODO: change variable to right value
    const URL = formatSearchUrl()
    const readToken = td.M2M_TOKEN.{{upperReturnType}}_READ
    const outScopeToken = td.M2M_TOKEN.OTHER_READ
          {{/isListContainer}}
          {{^isListContainer}}
    // TODO: change variable to right value
    const id = {{baseName}}_A_ID
    const URL = formatGetUrl(id)
    const readToken = td.M2M_TOKEN.{{upperReturnType}}_READ
    const outScopeToken = td.M2M_TOKEN.OTHER_READ
          {{/isListContainer}}
        {{/x-get-method}}
        {{#x-head-method}}
          {{#hasQueryParams}}
    // TODO: change variable to right value
    const URL = formatSearchUrl()
    const readToken = td.M2M_TOKEN.{{upperReturnType}}_READ
    const outScopeToken = td.M2M_TOKEN.OTHER_READ
          {{/hasQueryParams}}
          {{^hasQueryParams}}
    // TODO: change variable to right value
    const id = {{baseName}}_A_ID
    const URL = formatGetUrl(id)
    const readToken = td.M2M_TOKEN.{{upperReturnType}}_READ
    const outScopeToken = td.M2M_TOKEN.OTHER_READ
          {{/hasQueryParams}}
        {{/x-head-method}}
        {{#x-put-method}}
    // TODO: change variable to right value
    // TODO UNIT: copy id & body to unit
    const id = {{baseName}}_A_ID
    const body = {
    {{#bodyParams}}
    {{#isModel}}
      {{#vendorExtensions}}
        {{#x-refModel}}
          {{#vars}}
      {{baseName}}: '',
          {{/vars}}
        {{/x-refModel}}
      {{/vendorExtensions}}
    {{/isModel}}
    {{^isModel}}
       {{baseName}}: '',
    {{/isModel}}
    {{/bodyParams}}
    }
    const URL = formatUpdateUrl(id)
    const updateToken = td.M2M_TOKEN.{{upperReturnType}}_UPDATE
    const outScopeToken = td.M2M_TOKEN.OTHER_UPDATE
        {{/x-put-method}}
        {{#x-patch-method}}
    // TODO: change variable to right value
    // TODO UNIT: copy id & body to unit
    const id = {{baseName}}_A_ID
    const body = {
    {{#bodyParams}}
      {{#isModel}}
        {{#vendorExtensions}}
          {{#x-refModel}}
            {{#vars}}
      {{baseName}}: '',
            {{/vars}}
          {{/x-refModel}}
        {{/vendorExtensions}}
      {{/isModel}}
      {{^isModel}}
      {{baseName}}: '',
      {{/isModel}}
    {{/bodyParams}}
    }
    const URL = formatPartiallyUpdateUrl(id)
    const updateToken = td.M2M_TOKEN.{{upperReturnType}}_UPDATE
    const outScopeToken = td.M2M_TOKEN.OTHER_UPDATE
        {{/x-patch-method}}
        {{#x-delete-method}}
    const id = {{baseName}}_A_ID
    const URL = formatRemoveUrl(id)
    const deleteToken = td.M2M_TOKEN.{{upperReturnType}}_DELETE
    const outScopeToken = td.M2M_TOKEN.OTHER_DELETE
        {{/x-delete-method}}
    describe('success request', () => {
        {{#x-head-method}}
          {{#hasQueryParams}}
      const assertHeads = async (criteria, filters, token) => {
        const res = await th.getRequest(formatSearchUrl(criteria), token)
        should.equal(res.status, httpStatus.OK)
        await th.assertHeadBody(res)
        if (criteria.page) {
          await assert.responseHeader(res.headers, filters.length, criteria.page, criteria.perPage)
        } else {
          await assert.responseHeader(res.headers, filters.length)
        }
      }
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: readToken })
      ]
      _.each(users, user => {
        it(`200 - should success when search all (${user.role})`, async () => {
          await assertHeads({}, RECORDS, user.token)
        })
      })
      // TODO UNIT: copy to unit
      // test different search conditions
      const includesQuery = {
      {{#queryParams}}
        {{#isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(includesQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            // TODO: remove toLowerCase if need
            const filters = RECORDS.filter(item =>
              String(item[key]).toLowerCase().includes(String(value).toLowerCase()))
            // TODO UNIT: await assertSearch({ [key]: value }, filters)
            await assertHeads({ [key]: value }, filters, ADMIN_USER.token)
          })
        })
      })
      const equalQuery = {
      {{#queryParams}}
        {{^isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(equalQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            const filters = RECORDS.filter(item => item[key] === value)
            // TODO UNIT: await assertSearch({ [key]: value }, filters)
            await assertHeads({ [key]: value }, filters, ADMIN_USER.token)
          })
        })
      })
      xit('200 - search: should success when pagination', async () => {
        const criteria = {
          page: 2,
          perPage: 2,
          name: 'la'
        }
        // TODO: remove toLowerCase if need
        const filters = RECORDS.filter(item =>
          String(item.name).toLowerCase().includes(String(criteria.name).toLowerCase()))
        // TODO UNIT: await assertSearch(criteria, filters)
        await assertHeads(criteria, filters, ADMIN_USER.token)
      })
      xit('200 - search: should success when other condition', async () => {
        // TODO: modify body content
        const criteria = {
        {{#queryParams}}
          {{baseName}}: '',
        {{/queryParams}}
        }
        const filters = RECORDS.filter(item => {
          return true
        })
        // TODO UNIT: await assertSearch(criteria, filters)
        await assertHeads(criteria, filters, ADMIN_USER.token)
      })
          {{/hasQueryParams}}
          {{^hasQueryParams}}
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: readToken })
      ]
      _.each(users, user => {
        it(`200 - should success when find by id (${user.role})`, async () => {
          const res = await th.headRequest(URL, user.token)
          should.equal(res.status, httpStatus.OK)
          await th.assertHeadBody(res)
        })
      })
          {{/hasQueryParams}}
        {{/x-head-method}}
        {{#x-get-method}}
          {{#isListContainer}}
      const assertSearch = async (criteria, filters, token) => {
        const res = await th.getRequest(formatSearchUrl(criteria), token)
        should.equal(res.status, httpStatus.OK)
        if (criteria.page) {
          await assert.responseHeader(res.headers, filters.length, criteria.page, criteria.perPage)
          should.equal(res.body.length, criteria.perPage)
        } else {
          if (filters.length === 0) {
            should.equal(0, res.body.length)
          } else {
            await assert.{{caseReturnType}}SearchBody(res.body, filters)
            await assert.responseHeader(res.headers, filters.length)
          }
        }
      }
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: readToken })
      ]
      _.each(users, user => {
        it(`200 - should success when no condition (${user.role})`, async () => {
          await assertSearch({}, RECORDS, user.token)
        })
      })
      // TODO UNIT: copy to unit
      // test different search conditions
      const includesQuery = {
      {{#queryParams}}
        {{#isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(includesQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            // TODO: remove toLowerCase if need
            const filters = RECORDS.filter(item =>
              String(item[key]).toLowerCase().includes(String(value).toLowerCase()))
            // TODO UNIT: await assertSearch({ [key]: value }, filters)
            await assertSearch({ [key]: value }, filters, ADMIN_USER.token)
          })
        })
      })
      const equalQuery = {
      {{#queryParams}}
        {{^isString}}
        {{baseName}}: [],
        {{/isString}}
      {{/queryParams}}
      }
      _.each(equalQuery, (values, key) => {
        _.each(values, value => {
          xit(`200 - ${key}: should success when use '${String(value)}'`, async () => {
            const filters = RECORDS.filter(item => item[key] === value)
            // TODO UNIT: await assertSearch({ [key]: value }, filters)
            await assertSearch({ [key]: value }, filters, ADMIN_USER.token)
          })
        })
      })
      xit('200 - search: should success when pagination', async () => {
        const criteria = {
          page: 2,
          perPage: 2,
          name: 'la'
        }
        // TODO: remove toLowerCase if need
        const filters = RECORDS.filter(item =>
          String(item.name).toLowerCase().includes(String(criteria.name).toLowerCase()))
        // TODO UNIT: await assertSearch(criteria, filters)
        await assertSearch(criteria, filters, ADMIN_USER.token)
      })
      xit('200 - search: should success when other condition', async () => {
        // TODO: modify body content
        const criteria = {
      {{#queryParams}}
          {{baseName}}: '',
      {{/queryParams}}
        }
        const filters = RECORDS.filter(item => {
          return true
        })
        // TODO UNIT: await assertSearch(criteria, filters)
        await assertSearch(criteria, filters, ADMIN_USER.token)
      })
          {{/isListContainer}}
          {{^isListContainer}}
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: readToken })
      ]
      _.each(users, user => {
        it(`200 - should success when find by id (${user.role})`, async () => {
          const res = await th.getRequest(URL, user.token)
          should.equal(res.status, httpStatus.OK)
          await assert.{{caseReturnType}}GetBody(res.body, RECORDS.find(item => item.id === id))
        })
      })
          {{/isListContainer}}
        {{/x-get-method}}
        {{#x-post-method}}
      const assertCreate = async (aBody, user) => {
        // TODO: change search condition if need
        const oldRes = await th.getRequest(formatSearchUrl({ name: aBody.name }), ADMIN_USER.token)
        const res = await th.postRequest(formatCreateUrl(), aBody, user.token)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexCreate(res.body)
        const newRes = await th.getRequest(formatGetUrl(res.body.id), ADMIN_USER.token)
        should.equal(true, _.isEmpty(oldRes.body))
        should.equal(res.status, td.HTTP_STATUS.CREATE_SUCCESS)
        should.equal(true, moment(res.body.createdAt).isAfter(beforeTest))
        await assert.{{caseReturnType}}CreateBody(res.body, newRes.body, user.handle || user.sub)
        await assert.{{caseReturnType}}CreateBody(res.body, aBody)
        RECORDS.push(res.body)
        newIds.push(res.body.id)
      }
      // TODO Unit: Copy bodies, users to unit
      const bodies = [
        _.assign({}, body, { name: body.name + ` ${ADMIN_USER.role} test` }),
        _.assign({}, body, { name: body.name + ` ${COPILOT_USER.role} test` }),
        _.assign({}, body, { name: body.name + ' m2m test' }),
        {
          // TODO: add more test data
        }
      ]
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: createToken }),
        ..._.fill(new Array(bodies.length - 3), ADMIN_USER)
      ]
      // execute tests
      _.each(bodies, (aBody, index) => {
        it(`201 - should success when create  with ${JSON.stringify(aBody)} (${users[index].role})`, async () => {
          await assertCreate(aBody, users[index])
        })
      })
        {{/x-post-method}}
        {{#x-delete-method}}
      const assertDelete = async (id, user) => {
        const oldRes = await th.getRequest(formatGetUrl(id), ADMIN_USER.token)
        const res = await th.deleteRequest(formatRemoveUrl(id), user.token)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexDelete(record)
        should.exist(oldRes.body)
        should.equal(res.status, td.HTTP_STATUS.DELETE_SUCCESS)
        await th.assertHeadBody(res)
        try {
          await th.getRequest(formatGetUrl(id), ADMIN_USER.token)
        } catch (err) {
          should.equal(_.get(err, tc.PathOfMessage), `{{caseReturnType}}s with id: ${id} does not exist`)
          should.equal(err.status, httpStatus.NOT_FOUND)
        }
      }
      it(`204 - should success when delete by id (admin)`, async () => {
        await assertDelete(RECORDS[0].id, ADMIN_USER)
      })
      it(`204 - should success when delete by id (copilot)`, async () => {
        await assertDelete(RECORDS[1].id, COPILOT_USER)
      })
      it(`204 - should success when delete by id (m2m)`, async () => {
        await assertDelete(RECORDS[2].id, _.assign({}, M2M_USER, { token: deleteToken }))
      })
      _.each(RECORDS, (record, index) => {
        if (index > 2) {
          it(`204 - should success when delete by id ${record.id}`, async () => {
            await assertDelete(RECORDS[index].id, _.assign({}, M2M_USER, { token: deleteToken }))
          })
        }
      })
        {{/x-delete-method}}
        {{#x-put-method}}
      const assertUpdate = async (aid, aBody, user) => {
        const oldRes = await th.getRequest(formatGetUrl(aid), ADMIN_USER.token)
        const res = await th.putRequest(formatUpdateUrl(aid), aBody, user.token)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexUpdate(res.body)
        const newRes = await th.getRequest(formatGetUrl(aid), ADMIN_USER.token)
        should.not.equal(JSON.stringify(res.body), JSON.stringify(oldRes.body))
        should.equal(res.status, httpStatus.OK)
        await assert.{{caseReturnType}}PartialUpdateBody(res.body, newRes.body, user.handle || user.sub)
        await assert.{{caseReturnType}}PartialUpdateBody(res.body, aBody)
      }
      // TODO UNIT: copy value to unit
      const bodies = [
      {{#bodyParams}}
        _.assign({}, {
        {{#isModel}}
          {{#vendorExtensions}}
            {{#x-refModel}}
              {{#vars}}
          {{baseName}}: body.{{baseName}} + '-admin role',
              {{/vars}}
            {{/x-refModel}}
          {{/vendorExtensions}}
        {{/isModel}}
        {{^isModel}}
          {{baseName}}: body.{{baseName}} + '-admin role',
        {{/isModel}}
        }),
        _.assign({}, {
      {{#isModel}}
        {{#vendorExtensions}}
          {{#x-refModel}}
            {{#vars}}
          {{baseName}}: body.{{baseName}} + '-copilot role',
            {{/vars}}
          {{/x-refModel}}
        {{/vendorExtensions}}
      {{/isModel}}
      {{^isModel}}
          {{baseName}}: body.{{baseName}} + '-copilot role',
      {{/isModel}}
        }),
        _.assign({}, {
      {{#isModel}}
        {{#vendorExtensions}}
          {{#x-refModel}}
            {{#vars}}
          {{baseName}}: body.{{baseName}} + '-m2m role',
            {{/vars}}
          {{/x-refModel}}
        {{/vendorExtensions}}
      {{/isModel}}
      {{^isModel}}
          {{baseName}}: body.{{baseName}} + '-m2m role',
      {{/isModel}}
      {{/bodyParams}}
        })
      ]
      const ids = [
        ..._.fill(new Array(bodies.length), id)
      ]
      // TODO UNIT: copy if need
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: updateToken }),
        ..._.fill(new Array(bodies.length-3), ADMIN_USER)
      ]
      _.each(bodies, (aBody, index) => {
        // TODO UNIT: await assertUpdate(ids[index], aBody)
        it(`200 - should success when update with ${JSON.stringify(aBody)} (${users[index].role})`, async () => {
          // TODO UNIT: await assertUpdate(ids[index], aBody, users[index])
          await assertUpdate(ids[index], aBody, users[index])
        })
      })
        {{/x-put-method}}
        {{#x-patch-method}}
      const assertPartiallyUpdate = async (aid, aBody, token, userId) => {
        const oldRes = await th.getRequest(formatGetUrl(aid), ADMIN_USER.token)
        const res = await th.patchRequest(formatPartiallyUpdateUrl(aid), aBody, token)
        // TODO: remove if not need elastic search
        await {{baseName}}IndexUpdate(record)
        const newRes = await th.getRequest(formatGetUrl(aid), ADMIN_USER.token)
        should.equal(res.status, httpStatus.OK)
        _.each(aBody, (value, key) => {
          if (_.isArray(value)) {
            if (body !== aBody) {
              should.not.equal(JSON.stringify(oldRes.body[key], JSON.stringify(value)))
            }
            should.equal(JSON.stringify(newRes.body[key]), JSON.stringify(value))
          } else {
            if (body !== aBody) {
              should.not.equal(oldRes.body[key], value)
            }
            should.equal(newRes.body[key], value)
          }
        })
        await assert.{{caseReturnType}}PartialUpdateBody(res.body, newRes.body, userId)
        await assert.{{caseReturnType}}PartialUpdateBody(res.body, _.assign({}, oldRes.body, aBody))
      }
      // TODO: change body content
      const bodies = [
        { name: `${body.name} ${ADMIN_USER.role} update` },
        { name: `${body.name} ${COPILOT_USER.role} update` },
        { name: `${body.name} ${M2M_TOKEN_SUB} update` },
      {{#bodyParams}}
        {{#isModel}}
          {{#vendorExtensions}}
            {{#x-refModel}}
              {{#vars}}
        body.{{baseName}} + '-partially update',
              {{/vars}}
            {{/x-refModel}}
          {{/vendorExtensions}}
        {{/isModel}}
        {{^isModel}}
        {{baseName}}: body.{{baseName}},
        {{/isModel}}
      {{/bodyParams}}
        body
      ]
      const ids = [
        ..._.fill(new Array(bodies.length), id)
      ]
      // TODO UNIT: copy if need
      const users = [
        ADMIN_USER,
        COPILOT_USER,
        _.assign({}, M2M_USER, { token: updateToken }),
        ..._.fill(new Array(bodies.length-3), ADMIN_USER)
      ]
      _.each(bodies, (aBody, index) => {
        it(`200 - should success when update with '${JSON.stringify(aBody)}' (${users[index].role})`, async () => {
          await assertPartiallyUpdate(ids[index], aBody, users[index])
        })
      })
        {{/x-patch-method}}

        {{#x-valid-methods}}
          {{^isFailValidate}}
      // title: '{{title}}'
          {{/isFailValidate}}
        {{/x-valid-methods}}
    });

    xdescribe('fail request', () => {
        {{#x-post-method}}
      const param = {
        body,
        URL,
        token: ADMIN_USER.token
      }
      const requests = []
      // TODO UNIT: copy belows
      // test invalid param
      requests.push(...th.genStringTests(
        ['name'],
        td.STRING_INVALIDS,
        param
      ))
      requests.push(...th.genBooleanTests(
        ['isActive'],
        td.BOOLEAN_INVALIDS,
        param
      ))
      requests.push(...th.genGuidTests(
        ['typeId'],
        td.GUID_INVALIDS,
        param
      ))
      requests.push(...th.genDateTests(
        ['startDate'],
        td.DATE_INVALIDS,
        param
      ))
      requests.push(...th.genNumberTests(
        ['count'],
        td.POSITIVE_INT_INVALIDS,
        _.assign({}, param, {
          needPositive: true,
          needInteger: true
        })
      ))
      requests.push(...th.genStringArrayTests(
        ['tags'],
        td.STRING_ARRAY_INVALIDS,
        param
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [URL, _.assign({}, body, { invalid: 'invalid' }), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        },
        {
          title: '404 - typeId: should fail when id not exist',
          params: [URL, _.assign({}, body, { typeId: td.NO_EXIST_ID }), ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.TimelineTemplates_Not_Exist
        },
        {
          title: '409 - should fail when dup name',
          params: [URL, _.assign({}, body, { name: 'Standard Code' }), ADMIN_USER.token],
          status: httpStatus.CONFLICT,
          message: `{{baseName}} with name: Exist already exist`
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, body, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, body, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL, body))
      // execute tests
      _.each(requests, request => {
        request.operation = th.postRequest
        th.failIt(request)
      })
        {{/x-post-method}}
        {{#x-delete-method}}
      const requests = []
      // TODO UNIT: copy to unit
      // test invalid params
      requests.push(...[
        {
          title: '400 - {{caseReturnType}}Id: should fail when not uuid',
          params: [formatRemoveUrl('abc'), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when not exist',
          params: [formatRemoveUrl(td.NO_EXIST_ID), ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL))
      // execute tests
      _.each(requests, request => {
        request.operation = th.deleteRequest
        th.failIt(request)
      })
        {{/x-delete-method}}
        {{#x-head-method}}
          {{#hasQueryParams}}
      const param = {
        URL,
        token: ADMIN_USER.token
      }
      const requests = []
      // test invalid params
      requests.push(...th.genStringTests(
        [{{#queryParams}}{{#isString}}'{{baseName}}', {{/isString}}{{/queryParams}}],
        [''],
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genBooleanTests(
        [{{#queryParams}}{{#isBoolean}}'{{baseName}}', {{/isBoolean}}{{/queryParams}}],
        td.BOOLEAN_INVALIDS.filter(value => !_.isUndefined(value)),
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genDateTests(
        ['createdDateStart'],
        td.DATE_INVALIDS.filter(value => !_.isUndefined(value)),
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['count'],
        td.POSITIVE_INT_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          needPositive: true,
          needInteger: true
        })
      ))
      requests.push(...th.genGuidTests(
        ['id'],
        ['', 'abc'],
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['page'],
        td.PAGE_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          min: 1,
          needInteger: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['perPage'],
        td.PERPAGE_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          min: 1,
          max: 100,
          needInteger: true
        })
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [formatSearchUrl({ invalid: 'invalid' }), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL))
      // execute tests
      _.each(requests, request => {
        request.operation = th.getRequest
        th.failIt(request)
      })
          {{/hasQueryParams}}
          {{^hasQueryParams}}
      // test invalid params
      const requests = []
      requests.push(...[
        {
          title: '400 - {{caseReturnType}}Id: should fail when invalid id',
          params: [formatGetUrl('abc'), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when not exist',
          params: [formatGetUrl(td.NO_EXIST_ID), ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL))
      // execute tests
      _.each(requests, request => {
        request.operation = th.getRequest
        th.failIt(request)
      })
          {{/hasQueryParams}}
        {{/x-head-method}}
        {{#x-get-method}}
          {{#isListContainer}}
      const param = {
        URL,
        token: ADMIN_USER.token
      }
      const requests = []
      // TODO UNIT: copy to unit
      // test invalid params
      requests.push(...th.genStringTests(
        [{{#queryParams}}{{#isString}}'{{baseName}}', {{/isString}}{{/queryParams}}],
        // TODO UNIT: td.STRING_INVALIDS.filter(value => !_.isUndefined(value)),
        [''],
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genBooleanTests(
        [{{#queryParams}}{{#isBoolean}}'{{baseName}}', {{/isBoolean}}{{/queryParams}}],
        td.BOOLEAN_INVALIDS.filter(value => !_.isUndefined(value)),
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genDateTests(
        ['createdDateStart'],
        td.DATE_INVALIDS.filter(value => !_.isUndefined(value)),
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['count'],
        td.POSITIVE_INT_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          needPositive: true,
          needInteger: true
        })
      ))
      requests.push(...th.genGuidTests(
        ['id'],
        // TODO UNIT: td.STRING_INVALIDS.filter(item => !_.isUndefined(item)),
        ['', 'abc'],
        _.assign({}, param, {
          isSearch: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['page'],
        td.PAGE_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          min: 1,
          needInteger: true
        })
      ))
      requests.push(...th.genNumberTests(
        ['perPage'],
        td.PERPAGE_INVALIDS,
        _.assign({}, param, {
          isSearch: true,
          min: 1,
          max: 100,
          needInteger: true
        })
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [formatSearchUrl({ invalid: 'invalid' }), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL))
      // execute tests
      _.each(requests, request => {
        request.operation = th.getRequest
        th.failIt(request)
      })
          {{/isListContainer}}
          {{^isListContainer}}
      // TODO UNIT: copy to unit
      // test invalid params
      const requests = []
      requests.push(...[
        {
          title: '400 - {{caseReturnType}}Id: should fail when invalid id',
          params: [formatGetUrl('abc'), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when not exist',
          params: [formatGetUrl(td.NO_EXIST_ID), ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL))
      // execute tests
      _.each(requests, request => {
        request.operation = th.getRequest
        th.failIt(request)
      })
          {{/isListContainer}}
        {{/x-get-method}}
        {{#x-put-method}}
      const param = {
        body,
        URL,
        token: ADMIN_USER.token
      }
      const requests = []
      // TODO UNIT: copy to unit
      // test invalid params
      requests.push(...th.genStringTests(
        ['name'],
        td.STRING_INVALIDS,
        param
      ))
      requests.push(...th.genBooleanTests(
        ['isActive'],
        td.BOOLEAN_INVALIDS,
        param
      ))
      requests.push(...th.genGuidTests(
        ['typeId'],
        td.GUID_INVALIDS,
        param
      ))
      requests.push(...th.genDateTests(
        ['startDate'],
        td.DATE_INVALIDS,
        param
      ))
      requests.push(...th.genNumberTests(
        ['projectId'],
        td.POSITIVE_INT_INVALIDS,
        _.assign({}, param, {
          needPositive: true,
          needInteger: true
        })
      ))
      requests.push(...th.genStringArrayTests(
        ['tags'],
        td.STRING_ARRAY_INVALIDS,
        param
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [URL, _.assign({}, body, { invalid: 'invalid' }), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        },
        {
          title: '400 - {{caseReturnType}}Id: should fail when invalid uuid format',
          params: [formatUpdateUrl('abc'), body, ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when id not exist',
          params: [formatUpdateUrl(td.NO_EXIST_ID), body, ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, body, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, body, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL, body))
      // execute tests
      _.each(requests, request => {
        request.operation = th.putRequest
        th.failIt(request)
      })
        {{/x-put-method}}
        {{#x-patch-method}}
      const param = {
        body,
        URL,
        token: ADMIN_USER.token
      }
      const requests = []
      // TODO UNIT: copy to unit
      // test invalid params
      requests.push(...th.genStringTests(
        ['name'],
        td.STRING_INVALIDS.filter(value => !_.isUndefined(value)),
        param
      ))
      requests.push(...th.genBooleanTests(
        ['isActive'],
        td.BOOLEAN_INVALIDS.filter(value => !_.isUndefined(value)),
        param
      ))
      requests.push(...th.genGuidTests(
        ['typeId'],
        td.GUID_INVALIDS.filter(value => !_.isUndefined(value)),
        param
      ))
      requests.push(...th.genDateTests(
        ['startDate'],
        td.DATE_INVALIDS.filter(item => !_.isUndefined(item)),
        param
      ))
      requests.push(...th.genNumberTests(
        ['projectId'],
        td.POSITIVE_INT_INVALIDS.filter(item => !_.isUndefined(item)),
        _.assign({}, param, {
          needPositive: true,
          needInteger: true
        })
      ))
      requests.push(...th.genStringArrayTests(
        ['tags'],
        td.STRING_ARRAY_INVALIDS.filter(item => !_.isUndefined(item)),
        param
      ))
      requests.push(...[
        {
          title: '400 - should fail when invalid params',
          params: [URL, _.assign({}, body, { invalid: 'invalid' }), ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.notAllow('invalid').message
        },
        {
          title: '400 - {{caseReturnType}}Id: should fail when invalid uuid format',
          params: [formatPartiallyUpdateUrl('abc'), body, ADMIN_USER.token],
          status: httpStatus.BAD_REQUEST,
          message: jom.mustGuid('{{caseReturnType}}Id').message
        },
        {
          title: '404 - {{caseReturnType}}Id: should fail when id not exist',
          params: [formatPartiallyUpdateUrl(td.NO_EXIST_ID), body, ADMIN_USER.token],
          status: httpStatus.NOT_FOUND,
          message: td.ErrorMessage.{{baseName}}_Not_Exist
        }
      ])
      // test authorization and forbidden
      requests.push(...[
        {
          title: '403 - should fail when user',
          params: [URL, body, SUBMIT_USER.token],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        },
        {
          title: '403 - should fail when forbidden m2m token',
          params: [URL, body, outScopeToken],
          status: httpStatus.FORBIDDEN,
          message: tc.ErrorMessage.Forbidden
        }
      ])
      requests.push(...td.authFailRequests(URL, body))
      // execute tests
      _.each(requests, request => {
        request.operation = th.patchRequest
        th.failIt(request)
      })
        {{/x-patch-method}}
        {{#x-valid-methods}}
          {{#isFailValidate}}
      // title: '{{title}}'
          {{/isFailValidate}}
        {{/x-valid-methods}}
    })
  })
    {{/vendorExtensions}}
  {{/operation}}

{{/operations}}
})
