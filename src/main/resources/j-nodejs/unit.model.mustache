/*
* Unit testing of {{#models}}{{#model}}{{name}}{{/model}}{{/models}} Model with mocks
*/
{{#models}}
{{#model}}
{{#vendorExtensions}}
{{#x-table-model}}
const chai = require('chai')
const expect = chai.expect
const chaiAsPromised = require('chai-as-promised')
const sinon = require('sinon')
const sinonChai = require('sinon-chai')
chai.use(chaiAsPromised)
chai.use(sinonChai)
chai.should()

const { {{name}}Model } = require('../../../src/model/index')
const BaseModel = require('../../../src/model/base.model')
const testData = require('../../lib/test-data')
const checker = require('../../lib/test-helper')

describe('{{name}} Model Unit Test', () => {
  let searchToEndStub

  beforeEach(() => {
    searchToEndStub = sinon.stub(BaseModel.prototype, 'searchToEnd')
  })

  afterEach(() => {
    BaseModel.prototype.searchToEnd.restore()
  })

  describe('[constructor] function unit test', () => {
    it('property should assign the correct value when the parameter is passed', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model, testData.{{name}})
    })

    it('property should assign the correct value when the parameter is not passed', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model)
    })
  })

  describe('[newid] function unit test', () => {
    it('property should be assigned the correct assignment of the constructor', () => {
      const model = new {{name}}Model()
      checker.validateUuid(model.newId())
    })
  })

  describe('[saveItem] function unit test', () => {
    it('the function should return the correct save value', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model.saveItem(), testData.{{name}})
    })
  })

  describe('[viewItem] function unit test', () => {
    it('the function should return the correct view value', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model.viewItem(), model.saveItem())
    })
  })

  describe('[saveOption] function unit test', () => {
    it('the function should return the correct dynamo item option', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model.saveOption(model.saveItem()), testData.{{name}})
    })
  })

  describe('[save] function unit test', () => {
    it('the function should create the object with the new id', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model.save(), testData.{{name}})
    })

    it('the function should update the object with the correct parameters', () => {
      const model = new {{name}}Model(testData.{{name}})
      checker.validate{{name}}(model.save(), testData.{{name}})
    })
  })

  describe('[search] function unit test', () => {
    it('the functions should query using the correct query criteria', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model.search())
    })
  })

  describe('[all] function unit test', () => {
    it('the functions should return all data', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model.all())
    })
  })

  describe('[findById] function unit test', () => {
    it('the functions should return object by id', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model.findById())
    })
  })

  describe('[existName] function unit test', () => {
    it('the function should correctly confirm whether the name repeat', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model.existName())
    })
  })

  describe('[delete] function unit test', () => {
    it('the function should correctly delete the object', () => {
      const model = new {{name}}Model()
      checker.validate{{name}}(model.delete())
    })
  })
})
{{/x-table-model}}
{{/vendorExtensions}}
{{/model}}
{{/models}}
